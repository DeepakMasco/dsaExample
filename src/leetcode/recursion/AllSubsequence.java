package leetcode.recursion;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/*Given a string, we have to find out all subsequences of it. A String is a subsequence of a given String,
that is generated by deleting some character of a given string without changing its order.

Examples:

Input : abc
Output : a, b, c, ab, bc, ac, abc

Input : aaa
Output : a, aa, aaa


We are here making a decision tree approach.
We have 2 choices either we choose the first index char or we ignore it.

so we get 2 output for every input.

by including and excluding first character.
And now as we have already taken decision on first character we will start our input from index 1.

This will generate duplicate elements if any of the input character is repeated.

Subsequence means we can pick any character from input and attach with another but the order will remain same.
We will not get 'ca' as ans in this as it is not a subsequence.

If we want to include the 'ca' alse then it will be called as subset.


But in real life scenario the paltforms dont have these many test cases as for subsets there will be many P&C so they just restrict
us so that even if we print subsequence in subset question it will pass.
*/
public class AllSubsequence {

    public static void main(String[] args) {
        List<String> ans = new ArrayList<>();
        printSubSequence("abc", "", ans);
        Collections.sort(ans);
        System.out.println(ans);
    }

    private static void printSubSequence(String input, String output, List<String> ans) {
        if(input.length()==0) {
            ans.add(output);
            return;
        }

        printSubSequence(input.substring(1), output+input.charAt(0), ans);
        printSubSequence(input.substring(1), output, ans);
    }
}
