package leetcode;


import java.util.HashMap;
import java.util.Map;

/*You are given a string s consisting only of letters 'a' and 'b'.
 In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a
given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.



Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.
*/
public class RemovePalindrome {

    public static void main(String[] args) {
        System.out.println(removePalindromeSub("ababa"));
    }

    public static int removePalindromeSub(String s) {
        int len = s.length()-1;
        for(int i=0;i<len;i++) {
            if(s.charAt(i)!=s.charAt(len--)) {
                // We are doing this as string is only made of A and B . So at max we can remove all A's at once and then B's
                // So which makes 2 as result in worst case.
                return 2;
            }
        }


        return 0;
    }
}
